--[[
██╗   ██╗ ██████╗ ██╗██████╗ ██╗    ██╗ █████╗ ██████╗ ███████╗
██╗   ██║██╔═══██╗██║██╔══██╗██║    ██║██╔══██╗██╔══██╗██╔════╝
██╗   ██║██║   ██║██║██║  ██║██║ █╗ ██║███████║██████╔╝█████╗  
╚██╗ ██╔╝██║   ██║██║██║  ██║██║███╗██║██╔══██║██╔═══╝ ██╔══╝  
 ╚████╔╝ ╚██████╔╝██║██████╔╝╚███╔███╔╝██║  ██║██║     ███████╗
  ╚═══╝   ╚═════╝ ╚═╝╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝     ╚══════╝

                🚀 虚空软件 — 森林中的99夜 🚀
----------------------------------------------------------------------------
  重要提示:
  您必须复制并使用下面的完整脚本。不要点击链接:

  加载字符串(游戏:获取HTTP("https://raw.githubusercontent.com/VapeVoidware/VW-Add/main/loader.lua", 真))()

----------------------------------------------------------------------------
  如需支持，请访问 discord.gg/虚空软件
----------------------------------------------------------------------------
]]
如果 非 游戏:已加载() 然后 返回 结束
局部 作弊引擎模式 = 假
如果 (非 获取全局环境) 或 (获取全局环境 且 类型(获取全局环境) ~= "函数") 然后 作弊引擎模式 = 真 结束
如果 获取全局环境 且 非 获取全局环境().共享 然后 作弊引擎模式 = 真; 获取全局环境().共享 = {}; 结束
如果 获取全局环境 且 非 获取全局环境().调试 然后 作弊引擎模式 = 真; 获取全局环境().调试 = {回溯 = 函数(字符串) 返回 字符串 结束} 结束
如果 获取全局环境 且 非 获取全局环境().请求 然后 作弊引擎模式 = 真; 结束
如果 获取全局环境 且 获取全局环境().请求 且 类型(获取全局环境().请求) ~= "函数" 然后 作弊引擎模式 = 真 结束
局部 调试检查 = {
    类型 = "表",
    函数 = {
        "获取上值",
        "获取上值们",
        "获取常量",
        "获取原型"
    }
}
局部 函数 检查执行器()
    如果 识别执行器 ~= 空值 且 类型(识别执行器) == "函数" 然后
        局部 成功, 结果 = 保护调用(函数()
            返回 识别执行器()
        结束)   
        --局部 黑名单 = {'appleware', 'cryptic', 'delta', 'wave', 'codex', 'swift', 'solara', 'vega'}
        局部 黑名单 = {'solara', 'cryptic', 'xeno', 'ember', 'ronix'}
        局部 核心黑名单 = {'solara', 'xeno'}
        如果 成功 然后
            为 索引,值 于 键值对(黑名单) 做
                如果 字符串.查找(字符串.小写(转字符串(结果)), 值) 然后 作弊引擎模式 = 真 结束
            结束
            为 索引,值 于 键值对(核心黑名单) 做
                如果 字符串.查找(字符串.小写(转字符串(结果)), 值) 然后
                    保护调用(函数()
                        获取全局环境().传送队列 = 函数() 警告('传送队列已禁用!') 结束
                    结束)
                结束
            结束
            如果 字符串.查找(字符串.小写(转字符串(结果)), "delta") 然后
                获取全局环境().是网络所有者 = 函数()
                    返回 真
                结束
            结束
        结束
    结束
结束
任务.生成(函数() 保护调用(检查执行器) 结束)
局部 函数 检查调试()
    如果 作弊引擎模式 然后 返回 结束
    如果 非 获取全局环境().调试 然后 
        作弊引擎模式 = 真 
    否则 
        如果 类型(调试) ~= 调试检查.类型 然后 
            作弊引擎模式 = 真
        否则 
            为 索引, 值 于 键值对(调试检查.函数) 做
                如果 非 调试[值] 或 (调试[值] 且 类型(调试[值]) ~= "函数") 然后 
                    作弊引擎模式 = 真 
                否则
                    局部 成功, 结果 = 保护调用(调试[值]) 
                    如果 转字符串(结果) == "未实现" 然后 
                        作弊引擎模式 = 真 
                    结束
                结束
            结束
        结束
    结束
结束
--如果 (非 作弊引擎模式) 然后 检查调试() 结束
共享.作弊
